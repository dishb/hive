name: Create Release

on:
  push:
    branches:
      - main
    paths:
      - '**'
  pull_request:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'  # Replace with the desired Python version

      - name: Install dependencies
        run: pip3 install -r requirements.txt  # Replace with your dependencies, if any

      - name: Determine commit message
        id: commit_message
        run: echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.sha }})"
        
      - name: Check commit message prefix
        id: check_prefix
        run: |
          if [[ "${{ steps.commit_message.outputs.message }}" == "ðŸ“¦ [rel]"* ]]; then
            echo "::set-output name=prefix::true"
          else
            echo "::set-output name=prefix::false"
          fi

      - name: Get latest release
        id: latest_release
        if: ${{ steps.check_prefix.outputs.prefix == 'true' }}
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1,
            });
            const latestRelease = response.data[0];
            return latestRelease.tag_name

      - name: Calculate new release version
        id: new_version
        if: ${{ steps.check_prefix.outputs.prefix == 'true' }}
        run: |
          version=$(echo "${{ steps.latest_release.outputs.result }}" | cut -c 2-)
          version_parts=(${version//./ })
          new_version=$((${version_parts[0]} + 0)).$((${version_parts[1]} + 0)).$((${version_parts[2]} + 1))
          echo "::set-output name=new_version::$new_version"

      - name: Run Python script
        if: ${{ steps.check_prefix.outputs.prefix == 'true' }}
        run: python3 utility/build.py  # Replace with the path to your Python script

      - name: Create Release
        id: create_release
        if: ${{ steps.check_prefix.outputs.prefix == 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          release_name: Release v${{ steps.new_version.outputs.new_version }}
          body: |
            Description of the release

      - name: Upload file to Release
        if: ${{ steps.check_prefix.outputs.prefix == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/hive.app  # Replace with the path to the file created by your Python script
          asset_name: hive.app  # Replace with the desired name of the uploaded file
          asset_content_type: application/octet-stream  # Replace with the appropriate content type of your file
